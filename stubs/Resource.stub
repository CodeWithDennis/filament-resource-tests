<?php

use App\Filament\Resources\$resource$\Pages\List$modelPluralName$;
use $model$;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

use function Pest\Laravel\actingAs;
use function Pest\Livewire\livewire;


beforeEach(function () {
    actingAs(User::factory()->create([
        'password' => Hash::make('password'),
    ]));
});

it('can render page', function () {
    livewire(List$modelPluralName$::class)->assertSuccessful();
});

it('can render column', function (string $column) {
    $modelSingularName$::factory()->count(3)->create();

    livewire(List$modelPluralName$::class)->assertCanRenderTableColumn($column);
})->with($resourceTableColumnsWithoutHidden$);

it('has column', function (string $column) {
    livewire(List$modelPluralName$::class)
        ->assertTableColumnExists($column);
})->with($resourceTableColumns$);

it('can sort column', function (string $column) {
    $records = $modelSingularName$::factory()->count(3)->create();

    livewire(List$modelPluralName$::class)
        ->sortTable($column)
        ->assertCanSeeTableRecords($records->sortBy($column), inOrder: true)
        ->sortTable($column, 'desc')
        ->assertCanSeeTableRecords($records->sortByDesc($column), inOrder: true);
})->with($resourceTableSortableColumns$);

it('can search column', function (string $column) {
    $records = $modelSingularName$::factory()->count(3)->create();

    $search = $records->first()->{$column};

    livewire(List$modelPluralName$::class)
        ->searchTable($search)
        ->assertCanSeeTableRecords($records->where($column, $search))
        ->assertCanNotSeeTableRecords($records->where($column, '!=', $search));
})->with($resourceTableSearchableColumns$);

it('can individually search by column', function (string $column) {
    $records = $modelSingularName$::factory()->count(3)->create();

    $search = $records->first()->{$column};

    livewire(List$modelPluralName$::class)
        ->searchTableColumns([$column => $search])
        ->assertCanSeeTableRecords($records->where($column, $search))
        ->assertCanNotSeeTableRecords($records->where($column, '!=', $search));
})->with($resourceTableIndividuallySearchableColumns$);


it('cannot display trashed records by default', function () {
    $records = $modelSingularName$::factory()->count(3)->create();

    $trashedRecords = $modelSingularName$::factory()->trashed()->count(6)->create();

    livewire(List$modelPluralName$::class)
        ->assertCanSeeTableRecords($records)
        ->assertCanNotSeeTableRecords($trashedRecords)
        ->assertCountTableRecords(3);
})->skip(!$modelUsesSoftDeletes$, '$modelSingularName$ doesn\'t use SoftDeletes trait');
